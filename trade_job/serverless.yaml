service: trade-job

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.10
  profile: 'devuser'
  region: eu-west-1
  architecture: arm64
custom:
  pythonRequirements:
    usePoetry: true
    # this is necessary to avoid cross-platform build issues e.g. https://github.com/pydantic/pydantic/issues/6557
    dockerizePip: true
    # explicitly pass the arm64 platform to the docker build
    dockerImage: public.ecr.aws/sam/build-python3.10:latest-arm64
    # explicitly tell pip to fetch the arm64 version of the package
    dockerRunCmdExtraArgs: [ '--platform', 'linux/arm64/v8' ]

package:
  exclude:
    - node_modules/**
    - venv/**

functions:
  runTradeJob:
    handler: trade_run.start_trade_run
    reservedConcurrency: 1

stepFunctions:
  stateMachines:
    tradejobstepfunc:
      events:
        - http:
            path: startTradeJob
            method: POST
      name: tradeJobStepFunction
      definition:
        Comment: A description of my state machine
        StartAt: Lambda Invoke
        States:
          Lambda Invoke:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: $.Payload
            Parameters:
              Payload.$: $
              FunctionName: !GetAtt runTradeJob.Arn
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.TooManyRequestsException
                IntervalSeconds: 1
                MaxAttempts: 3
                BackoffRate: 2
            End: true

plugins:
  - serverless-better-credentials
  - serverless-step-functions
  - serverless-python-requirements
